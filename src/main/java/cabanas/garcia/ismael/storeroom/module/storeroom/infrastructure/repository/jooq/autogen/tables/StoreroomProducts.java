/*
 * This file is generated by jOOQ.
*/
package cabanas.garcia.ismael.storeroom.module.storeroom.infrastructure.repository.jooq.autogen.tables;


import cabanas.garcia.ismael.storeroom.module.storeroom.infrastructure.repository.jooq.autogen.Keys;
import cabanas.garcia.ismael.storeroom.module.storeroom.infrastructure.repository.jooq.autogen.Storeroom;
import cabanas.garcia.ismael.storeroom.module.storeroom.infrastructure.repository.jooq.autogen.tables.records.StoreroomProductsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Storeroom products
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3",
        "schema version:storeroom_2018.11.19.0"
    },
    date = "2018-12-10T05:57:40.531Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreroomProducts extends TableImpl<StoreroomProductsRecord> {

    private static final long serialVersionUID = 1072203689;

    /**
     * The reference instance of <code>storeroom.storeroom_products</code>
     */
    public static final StoreroomProducts STOREROOM_PRODUCTS = new StoreroomProducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoreroomProductsRecord> getRecordType() {
        return StoreroomProductsRecord.class;
    }

    /**
     * The column <code>storeroom.storeroom_products.sp_id</code>. Private product identifier
     */
    public final TableField<StoreroomProductsRecord, UUID> SP_ID = createField("sp_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Private product identifier");

    /**
     * The column <code>storeroom.storeroom_products.sp_storeroom_id</code>. Storeroom identifier
     */
    public final TableField<StoreroomProductsRecord, UUID> SP_STOREROOM_ID = createField("sp_storeroom_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Storeroom identifier");

    /**
     * The column <code>storeroom.storeroom_products.sp_name</code>. NAME OF the product
     */
    public final TableField<StoreroomProductsRecord, String> SP_NAME = createField("sp_name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "NAME OF the product");

    /**
     * The column <code>storeroom.storeroom_products.sp_creation</code>. Time instant when it is created
     */
    public final TableField<StoreroomProductsRecord, Timestamp> SP_CREATION = createField("sp_creation", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "Time instant when it is created");

    /**
     * The column <code>storeroom.storeroom_products.sp_modification</code>. Instant of the last update
     */
    public final TableField<StoreroomProductsRecord, Timestamp> SP_MODIFICATION = createField("sp_modification", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "Instant of the last update");

    /**
     * The column <code>storeroom.storeroom_products.sp_stock</code>. Product stock
     */
    public final TableField<StoreroomProductsRecord, Integer> SP_STOCK = createField("sp_stock", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Product stock");

    /**
     * Create a <code>storeroom.storeroom_products</code> table reference
     */
    public StoreroomProducts() {
        this("storeroom_products", null);
    }

    /**
     * Create an aliased <code>storeroom.storeroom_products</code> table reference
     */
    public StoreroomProducts(String alias) {
        this(alias, STOREROOM_PRODUCTS);
    }

    private StoreroomProducts(String alias, Table<StoreroomProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoreroomProducts(String alias, Table<StoreroomProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Storeroom products");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Storeroom.STOREROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StoreroomProductsRecord> getPrimaryKey() {
        return Keys.PK_STOREROOM_PRODUCTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StoreroomProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<StoreroomProductsRecord>>asList(Keys.PK_STOREROOM_PRODUCTS, Keys.UQ_STOREROOM_PRODUCTS_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StoreroomProductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StoreroomProductsRecord, ?>>asList(Keys.STOREROOM_PRODUCTS__FK_STOREROOM_PRODUCTS_STOREROOM_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StoreroomProducts as(String alias) {
        return new StoreroomProducts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreroomProducts rename(String name) {
        return new StoreroomProducts(name, null);
    }
}
